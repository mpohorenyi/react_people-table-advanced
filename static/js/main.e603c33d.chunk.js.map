{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","api.ts","utils/searchHelper.ts","types/SexFilter.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleRow.tsx","types/Sort.ts","components/PeopleTable.tsx","pages/PeoplePage.tsx","utils/getPreparedPeople.tsx","helpers/preparePeople.ts","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","App","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SexFilter","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","map","type","placeholder","onChange","event","target","century","includes","filter","age","length","Loader","PersonLink","person","pathname","slug","name","PeopleRow","born","died","fatherName","motherName","father","mother","useParams","Sort","PeopleTable","people","sort","order","sortValue","orderValue","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","visiblePeople","filterParam","preparedPeople","Math","ceil","normalizedQuery","toLowerCase","reverseFactor","a","b","localeCompare","getPreparedPeople","useEffect","getPeople","peopleFromServer","find","preparePeople","catch","finally","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"0QAGMA,EAAe,SAAC,GAAD,IACjBC,EADiB,EACjBA,SADiB,OAEhBC,IAAG,cAAe,CACrB,8BAA+BD,GAHZ,EAMRE,EAAS,WACpB,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEE,GAAG,IACHF,UAAWJ,EAFb,kBAOA,cAAC,IAAD,CACEM,GAAG,UACH,eAAa,OACbF,UAAWJ,EAHb,0BAWT,EC/BYO,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKH,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,E,OChBYI,EAAqB,kBAChC,oBAAIJ,UAAU,QAAd,sBADgC,E,qBCC5BK,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,yCCDA,SAASC,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,CC9CM,IAAKY,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,OAAYA,EAAZ,SAAYA,EAAZ,WAAYA,CAAZ,M,gCCeaC,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEpC,GAAI,CACFqC,OAAQxB,EAAcuB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC1BYM,EAAgB,WAC3B,MAAwCH,cAAxC,mBAAOC,EAAP,KAAqBG,EAArB,KACMC,EAAMJ,EAAaK,IAAI,QAAU,GACjCC,EAAQN,EAAaK,IAAI,UAAY,GACrCE,EAAYP,EAAaQ,OAAO,cAAgB,GAQtD,OACE,sBAAK9C,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,mBAAGA,UAAU,aAAa,UAAQ,YAAlC,SACGqB,OAAOC,QAAQU,GAAWe,KAAI,mCAAEvB,EAAF,KAAOC,EAAP,YAC7B,cAAC,EAAD,CAEEU,OAAQ,CAAEO,IAAKjB,GAAS,MACxBzB,UAAWF,IAAG,CACZ,YAAa4C,IAAQjB,IAJzB,SAOGD,GANIA,EAFsB,MAajC,qBAAKxB,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRgD,KAAK,SACLhD,UAAU,QACViD,YAAY,SACZxB,MAAOmB,EACPM,SAhCW,SAACC,GACpBV,EAAgB1B,EACduB,EAAc,CAAEM,MAAOO,EAAMC,OAAO3B,OAAS,OAEhD,IA+BO,sBAAMzB,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACG,CAAC,KAAM,KAAM,KAAM,KAAM,MAAM+C,KAAI,SAAAM,GAAO,OACzC,cAAC,EAAD,CAEElB,OAAQ,CACNU,UAAWA,EAAUS,SAASD,GAC1BR,EAAUU,QAAO,SAAAC,GAAG,OAAIH,IAAYG,CAAhB,IADb,sBAEHX,GAFG,CAEQQ,KAErB,UAAQ,UACRrD,UAAWF,IAAG,cAAe,CAC3B,UAAW+C,EAAUS,SAASD,KATlC,SAYGA,GAXIA,EAFkC,MAkB7C,qBAAKrD,UAAU,mBAAf,SACE,cAAC,EAAD,CACEmC,OAAQ,CAAEU,UAAW,MACrB,UAAQ,aACR7C,UAAWF,IAAG,oBAAqB,CACjC,cAAe+C,EAAUY,SAJ7B,wBAaN,qBAAKzD,UAAU,cAAf,SACE,cAAC,EAAD,CACEmC,OAAQ,CAAES,MAAO,KAAMF,IAAK,KAAMG,UAAW,MAC7C7C,UAAU,0CAFZ,mCASP,ECnGY0D,G,MAAS,kBACpB,qBAAK1D,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCQT2D,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,EAAuBvB,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,CACEpC,GAAI,CACF2D,SAAS,MAAD,OAAQD,EAAOE,MACvBvB,OAAQD,EAAalB,YAEvBpB,UAAWF,IAAG,CACZ,kBAAkC,MAAf8D,EAAOlB,MAN9B,SASGkB,EAAOG,MAGb,ECfYC,EAA6B,SAAC,GAAgB,IAAdJ,EAAa,EAAbA,OAEzClB,EACEkB,EADFlB,IAAKuB,EACHL,EADGK,KAAMC,EACTN,EADSM,KAAMC,EACfP,EADeO,WAAYC,EAC3BR,EAD2BQ,WAAYC,EACvCT,EADuCS,OAAQC,EAC/CV,EAD+CU,OAE3CR,EAASS,cAATT,KAER,OACE,qBACE,UAAQ,SACR9D,UAAWF,IAAG,CACZ,yBAA0B8D,EAAOE,OAASA,IAH9C,UAME,6BACE,cAAC,EAAD,CAAYF,OAAQA,MAGtB,6BAAKlB,IACL,6BAAKuB,IACL,6BAAKC,IACL,6BACGI,EACC,cAAC,EAAD,CAAYV,OAAQU,IAEpBF,GAAc,MAIlB,6BACGC,EACC,cAAC,EAAD,CAAYT,OAAQS,IAEpBF,GAAc,QAKvB,EChDWK,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,CAAZ,MCcaC,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7C,EAAuBrC,cAAhBC,EAAP,oBACMqC,EAAOrC,EAAaK,IAAI,SAAW,GACnCiC,EAAQtC,EAAaK,IAAI,UAAY,GAE3C,OACE,wBACE,UAAQ,cACR3C,UAAU,uDAFZ,UAIE,gCACE,+BACGqB,OAAOC,QAAQkD,GAAMzB,KAAI,YAAmB,IAAD,mBAAhBvB,EAAgB,KAAXC,EAAW,KACpCoD,EAAaF,GAEbA,GAAQA,IAASlD,IAAWmD,IAAUnD,EADxCA,EAEEqD,EAAaH,IAASlD,IAAUmD,GAAS,OAE/C,OACE,6BACE,uBAAM5E,UAAU,8BAAhB,UACGwB,EACD,cAAC,EAAD,CACEW,OAAQ,CACNwC,KAAME,GAAa,KACnBD,MAAOE,GAAc,MAHzB,SAME,sBAAM9E,UAAU,OAAhB,SACE,mBACEA,UAAWF,IAAG,MAAO,CACnB,UAAW6E,IAASlD,EACpB,aAAckD,IAASlD,IAAUmD,EACjC,eAAgBD,IAASlD,GAASmD,cAdrCpD,EAsBZ,IAED,wCACA,6CAIJ,gCACGkD,EAAO3B,KAAI,SAAAa,GAAM,OAChB,cAAC,EAAD,CAEEA,OAAQA,GADHA,EAAOE,KAFE,QASzB,EC3DM,IAAMiB,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAON,EAAP,KAAeO,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEA,EAAuBhD,cAAhBC,EAAP,oBAOMgD,ECfD,SAA2BZ,EAAkBa,GAClD,IAAIC,EAAc,YAAOd,GAazB,GAXIa,EAAY7C,MACd8C,EAAiBA,EACdjC,QAAO,SAAAK,GAAM,OAAIA,EAAOlB,MAAQ6C,EAAY7C,GAA/B,KAGd6C,EAAY1C,UAAUY,SACxB+B,EAAiBA,EAAejC,QAAO,SAAAK,GAAM,OAC3C2B,EAAY1C,UAAUS,SAASmC,KAAKC,KAAK9B,EAAOK,KAAO,KAAK7C,WADjB,KAK3CmE,EAAY3C,MAAO,CACrB,IAAM+C,EAAkBJ,EAAY3C,MAAMgD,cAE1CJ,EAAiBA,EACdjC,QAAO,SAAAK,GAAM,OAAIA,EAAOG,KAAK6B,cAActC,SAASqC,EAAvC,GACjB,CAED,GAAIJ,EAAYZ,KAAM,CACpB,IAAMkB,EAAgBN,EAAYX,OAAS,EAAI,EAE/CY,EAAiB,YAAIA,GAAgBb,MAAK,SAACmB,EAAGC,GAC5C,OAAQR,EAAYZ,MAClB,IAAK,OACL,IAAK,MACH,OAAOmB,EAAEP,EAAYZ,MAClBqB,cAAcD,EAAER,EAAYZ,OAASkB,EAE1C,IAAK,OACL,IAAK,OACH,OAAQC,EAAEP,EAAYZ,MAAQoB,EAAER,EAAYZ,OAASkB,EAEvD,QACE,OAAO,EAEZ,GACF,CAED,OAAOL,CACR,CD3BuBS,CAAkBvB,EAAQ,CAC9CC,KAPWrC,EAAaK,IAAI,SAAW,GAOjCiC,MANMtC,EAAaK,IAAI,UAAY,GAM5BD,IALHJ,EAAaK,IAAI,QAAU,GAKnBC,MAJNN,EAAaK,IAAI,UAAY,GAIhBE,UAHTP,EAAaQ,OAAO,cAAgB,KAetD,OATAoD,qBAAU,WACRb,GAAW,GACXF,GAAa,GVtBV,WAAP,+BUuBIgB,GACGxF,MAAK,SAAAyF,GAAgB,OAAInB,EE/BH,SAACmB,GAC5B,OAAOA,EAAiBrD,KAAI,SAACa,GAAD,mBAAC,eACxBA,GADuB,IAE1BU,OAAQ8B,EAAiBC,MAAK,SAAA/B,GAAM,OAAIA,EAAOP,OAASH,EAAOQ,UAA3B,IACpCC,OAAQ+B,EAAiBC,MAAK,SAAAhC,GAAM,OAAIA,EAAON,OAASH,EAAOO,UAA3B,KAHV,GAK7B,CFyByCmC,CAAcF,GAA5B,IACrBG,OAAM,kBAAMlB,GAAW,EAAjB,IACNmB,SAAQ,kBAAMrB,GAAa,EAAnB,GACZ,GAAE,IAGD,qCACE,oBAAInF,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,WACIkF,GACA,qBAAKlF,UAAU,uCAAf,SACE,cAAC,EAAD,MAIJ,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGkF,GACC,cAAC,EAAD,IAGAE,IAAYF,GACZ,mBAAG,UAAQ,qBAAqBlF,UAAU,kBAA1C,mCAKC0E,EAAOjB,SAAWyB,GACnB,mBAAG,UAAQ,kBAAX,+CAKCI,EAAc7B,QAAWyB,IAGvBR,EAAOjB,SAAWyB,GACnB,cAAC,EAAD,CACER,OAAQY,IAJZ,qGAef,EGlFYmB,EAAyB,kBACpC,oBAAIzG,UAAU,QAAd,2BADoC,ECMzB0G,EAAO,kBAClB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAU1G,GAAG,IAAI4G,SAAO,MACpD,cAAC,IAAD,CAAOH,KAAK,SAAZ,SACE,cAAC,IAAD,CAAOA,KAAK,SAASC,QAAS,cAAC,EAAD,QAEhC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,cAVf,ECDpBG,qBAAWC,SAASC,eAAe,SAChCC,OAAO,cAAC,EAAD,I","file":"static/js/main.e603c33d.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => cn('navbar-item', {\n  'has-background-grey-lighter': isActive,\n});\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            aria-current=\"page\"\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","export enum SexFilter {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nimport { getSearchWith } from '../utils/searchHelper';\n\nimport { SexFilter } from '../types/SexFilter';\n\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(\n      searchParams, { query: event.target.value || null },\n    ));\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SexFilter).map(([key, value]) => (\n          <SearchLink\n            key={key}\n            params={{ sex: value || null }}\n            className={cn({\n              'is-active': sex === value,\n            })}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleSearch}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map(century => (\n              <SearchLink\n                key={century}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(age => century !== age)\n                    : [...centuries, century],\n                }}\n                data-cy=\"century\"\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ query: null, sex: null, centuries: null }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `../${person.slug}`,\n        search: searchParams.toString(),\n      }}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PeopleRow: React.FC<Props> = ({ person }) => {\n  const {\n    sex, born, died, fatherName, motherName, father, mother,\n  } = person;\n  const { slug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': person.slug === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","export enum Sort {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nimport { Person } from '../types';\n\nimport { PeopleRow } from './PeopleRow';\nimport { Sort } from '../types/Sort';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(Sort).map(([key, value]) => {\n            const sortValue = !sort\n              ? value\n              : ((sort && sort !== value) || !order) && value;\n            const orderValue = sort === value && !order && 'desc';\n\n            return (\n              <th key={key}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {key}\n                  <SearchLink\n                    params={{\n                      sort: sortValue || null,\n                      order: orderValue || null,\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn('fas', {\n                          'fa-sort': sort !== value,\n                          'fa-sort-up': sort === value && !order,\n                          'fa-sort-down': sort === value && order,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PeopleRow\n            key={person.slug}\n            person={person}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getPeople } from '../api';\nimport { preparePeople } from '../helpers/preparePeople';\n\nimport { Person } from '../types';\n\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const visiblePeople = getPreparedPeople(people, {\n    sort, order, sex, query, centuries,\n  });\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n    getPeople()\n      .then(peopleFromServer => setPeople(preparePeople(peopleFromServer)))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {(isError && !isLoading) && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {(!people.length && !isLoading) && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {(!visiblePeople.length && !isLoading) ? (\n                <p>There are no people matching the current search criteria</p>\n              ) : (\n                (!!people.length && !isLoading) && (\n                  <PeopleTable\n                    people={visiblePeople}\n                  />\n                )\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport interface FilterParam {\n  sort: string;\n  order: string;\n  sex: string;\n  query: string;\n  centuries: string[];\n}\n\nexport function getPreparedPeople(people: Person[], filterParam: FilterParam) {\n  let preparedPeople = [...people];\n\n  if (filterParam.sex) {\n    preparedPeople = preparedPeople\n      .filter(person => person.sex === filterParam.sex);\n  }\n\n  if (filterParam.centuries.length) {\n    preparedPeople = preparedPeople.filter(person => (\n      filterParam.centuries.includes(Math.ceil(person.born / 100).toString())\n    ));\n  }\n\n  if (filterParam.query) {\n    const normalizedQuery = filterParam.query.toLowerCase();\n\n    preparedPeople = preparedPeople\n      .filter(person => person.name.toLowerCase().includes(normalizedQuery));\n  }\n\n  if (filterParam.sort) {\n    const reverseFactor = filterParam.order ? -1 : 1;\n\n    preparedPeople = [...preparedPeople].sort((a, b) => {\n      switch (filterParam.sort) {\n        case 'name':\n        case 'sex':\n          return a[filterParam.sort]\n            .localeCompare(b[filterParam.sort]) * reverseFactor;\n\n        case 'born':\n        case 'died':\n          return (a[filterParam.sort] - b[filterParam.sort]) * reverseFactor;\n\n        default:\n          return 1;\n      }\n    });\n  }\n\n  return preparedPeople;\n}\n","import { Person } from '../types';\n\nexport const preparePeople = (peopleFromServer: Person[]): Person[] => {\n  return peopleFromServer.map((person) => ({\n    ...person,\n    mother: peopleFromServer.find(mother => mother.name === person.motherName),\n    father: peopleFromServer.find(father => father.name === person.fatherName),\n  }));\n};\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"people\">\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}